name: "Build and Test Backend Services"
description: "Builds and tests Go backend services with coverage reporting and email template compilation"
author: "atomic-blend"

inputs:
  go-version:
    description: "Go version to use"
    required: false
    default: "1.21"
  node-version:
    description: "Node.js version to use"
    required: false
    default: "23.9"
  working-directory:
    description: "Working directory for the action"
    required: false
    default: "."
  codecov-token:
    description: "Codecov token for coverage upload"
    required: false
  upload-artifacts:
    description: "Whether to upload build artifacts"
    required: false
    default: "true"

outputs:
  coverage-file:
    description: "Path to the coverage output file"
    value: ${{ steps.test.outputs.coverage-file }}
  binary-path:
    description: "Path to the built binary"
    value: ${{ steps.build.outputs.binary-path }}

runs:
  using: "composite"
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}
        cache: true
        cache-dependency-path: ${{ inputs.working-directory }}/go.sum

    - name: Install linting tools
      shell: bash
      run: |
        go install golang.org/x/lint/golint@latest

    - name: Run linting
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        golint -set_exit_status ./...

    - name: Run tests with coverage
      id: test
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        go test -coverprofile=coverage.out -v ./...
        go tool cover -html=coverage.out -o coverage.html
        echo "coverage-file=${{ inputs.working-directory }}/coverage.out" >> $GITHUB_OUTPUT

    - name: Upload coverage report
      if: ${{ inputs.upload-artifacts == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ${{ inputs.working-directory }}/coverage.html

    - name: Build application
      id: build
      if: ${{ inputs.working-directory != 'shared'}}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        go build -o ./cmd/server
        echo "binary-path=${{ inputs.working-directory }}/cmd/server" >> $GITHUB_OUTPUT

    - name: Upload binary
      if: ${{ inputs.upload-artifacts == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: backend-binary
        path: ${{ inputs.working-directory }}/cmd/server

    - name: Upload coverage to Codecov
      if: ${{ inputs.codecov-token != '' }}
      uses: codecov/codecov-action@v3
      with:
        file: ${{ inputs.working-directory }}/coverage.out
        token: ${{ inputs.codecov-token }}
        fail_ci_if_error: false

    - name: Check if maizzle dir exists
      shell: bash
      id: check-maizzle-dir
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [ -n "maizzle" ] && [ -d "maizzle" ]; then
          echo "maizzle-exists=true" >> "$GITHUB_OUTPUT"
          echo "Maizzle directory found: maizzle"
        else
          echo "maizzle-exists=false" >> "$GITHUB_OUTPUT"
          echo "Maizzle directory not found or not specified"
        fi

    - name: Set up Node.js
      if: ${{ steps.check-maizzle-dir.outputs.maizzle-exists == 'true' }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}
        cache: "npm"
        cache-dependency-path: ${{ inputs.working-directory }}/maizzle/package-lock.json

    - name: Install email template dependencies
      if: ${{ steps.check-maizzle-dir.outputs.maizzle-exists == 'true' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}/maizzle
      run: npm install

    - name: Build email templates
      if: ${{ steps.check-maizzle-dir.outputs.maizzle-exists == 'true' }}
      working-directory: ${{ inputs.working-directory }}/maizzle
      shell: bash
      run: npm run build

branding:
  icon: "package"
  color: "blue"
