name: Main CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  GITHUB_ORG_NAME: ${{ github.repository_owner }}
  GITHUB_REPO_NAME: ${{ github.event.repository.name }}

jobs:
  test-coverage:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Run linting
        run: |
          go install golang.org/x/lint/golint@latest
          golint -set_exit_status ./...

      - name: Run tests with coverage
        run: |
          go test -coverprofile=coverage.out -v ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          fail_ci_if_error: false

  bump-version:
    needs: test-coverage
    runs-on: ubuntu-22.04
    env:
      COCOGITTO_VERSION: 6.2.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.email "pro@brandonguigo.com"
          git config user.name "GitHub Actions"

      - name: Cache cocogitto
        id: cache-cocogitto
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin/cog
          key: cocogitto-v${{ env.COCOGITTO_VERSION }}

      - name: Install Rust
        if: steps.cache-cocogitto.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Install Cocogitto
        if: steps.cache-cocogitto.outputs.cache-hit != 'true'
        run: |
          cargo install cocogitto --version ${{ env.COCOGITTO_VERSION }}
        env:
          RUSTFLAGS: --cfg procmacro2_semver_exempt

      - name: Check conventional commits validity
        run: |
          ~/.cargo/bin/cog check

      - name: Bump version
        run: |
          ~/.cargo/bin/cog bump --auto

      - name: Commit and push changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add CHANGELOG.md
            git commit -m "chore(release): $(git describe --abbrev=0 --tags) [skip ci]"
            git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main
            git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git tag $(git describe --abbrev=0 --tags)
          else
            echo "No changes to commit"
          fi

  build-docker-images:
    needs: bump-version
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get tag
        id: get-tag
        run: |
          TAG=$(git describe --abbrev=0 --tags)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.get-tag.outputs.tag }}

  create-github-release:
    needs: deploy-to-ecs
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get tag
        id: get-tag
        run: |
          TAG=$(git describe --abbrev=0 --tags)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Extract changelog
        id: extract-changelog
        run: |
          TAG=${{ steps.get-tag.outputs.tag }}
          CLEAN_TAG=$(echo "$TAG" | sed 's/^v//')

          if [ -f "CHANGELOG.md" ]; then
            # Try different changelog entry formats
            CHANGELOG=$(sed -n "/^## $TAG - /,/^## /p" CHANGELOG.md | sed '1d;$d')
            
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG=$(sed -n "/^## $CLEAN_TAG - /,/^## /p" CHANGELOG.md | sed '1d;$d')
            fi
            
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG=$(sed -n "/^## \[$CLEAN_TAG\] - /,/^## /p" CHANGELOG.md | sed '1d;$d')
            fi
            
            echo "$CHANGELOG" > release_notes.md
          else
            echo "No changelog found" > release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get-tag.outputs.tag }}
          name: v${{ steps.get-tag.outputs.tag }}
          body_path: release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
