name: Release Microservices

on:
  push:
    branches: [main]

env:
  COCOGITTO_VERSION: "6.3.0" # Specify the version of Cocogitto to use
  MEMONGO_DOWNLOAD_URL: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-debian12-8.0.13.tgz
  OS: "debian12"

permissions:
  contents: write
  actions: write
  packages: write

jobs:
  find-out-changes:
    runs-on: [self-hosted, Linux]
    outputs:
      changed_directories: ${{ steps.set-output.outputs.changed_directories }} # The `dirs` doesn't exist in the outputs of changed-files@v35 action.
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get last tag
        id: last-tag
        run: |
          LAST_TAG=$(git tag --list | grep -E '^(auth|productivity|grpc)/v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1 || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No tags found, using HEAD~1"
            echo "last_tag=HEAD~1" >> $GITHUB_OUTPUT
          else
            echo "Found last tag: $LAST_TAG"
            echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          dir_names: true
          dir_names_max_depth: 1 # This is optional. If not provided, full subdirectories' paths will be provided. Use it if you need to trim the output. See docs for details: https://github.com/tj-actions/changed-files/tree/main#inputs.
          json: true
          files: |
            auth/**
            productivity/**
            grpc/**
            mail/**
            mail-server/**
            shared/**
          quotepath: false
          base_sha: ${{ steps.last-tag.outputs.last_tag }}

      - name: "Set output in the matrix format"
        id: set-output
        run: echo "changed_directories={\"dir\":${{ steps.changed-files.outputs.all_changed_files }}}" >> "$GITHUB_OUTPUT"

  build-and-test:
    if: ${{ needs.find-out-changes.outputs.changed_directories != '' }} # Without it, the strategy parser will fail if the changed_directories is empty.
    runs-on: [self-hosted, Linux]
    strategy:
      matrix: ${{fromJson(needs.find-out-changes.outputs.changed_directories)}}
    needs:
      - find-out-changes
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build and test backend services
        id: build-test
        if: ${{ matrix.dir != 'grpc' }}
        uses: ./.github/actions/build-and-test
        with:
          go-version: "1.24.5"
          node-version: "23.9"
          memongo-download-url: ${{ env.MEMONGO_DOWNLOAD_URL }}
          working-directory: "${{ matrix.dir }}"
          maizzle-directory: "./maizzle"
          upload-artifacts: "false"

      - name: Test gRPC
        id: test-grpc
        if: ${{ matrix.dir == 'grpc' }}
        uses: ./.github/actions/test-grpc
        with:
          buf-version: "1.55.1"
          working-directory: "${{ matrix.dir }}"

      - name: Create success marker
        if: ${{ (matrix.dir != 'grpc' && steps.build-test.outcome == 'success') || (matrix.dir == 'grpc' && steps.test-grpc.outcome == 'success') }}
        run: |
          mkdir -p /tmp/success-markers
          echo "${{ matrix.dir }}" > /tmp/success-markers/${{ matrix.dir }}.txt

      - name: Upload success markers
        if: ${{ (matrix.dir != 'grpc' && steps.build-test.outcome == 'success') || (matrix.dir == 'grpc' && steps.test-grpc.outcome == 'success') }}
        uses: actions/upload-artifact@v4
        with:
          name: success-marker-${{ matrix.dir }}
          path: /tmp/success-markers/${{ matrix.dir }}.txt

  release:
    if: ${{ needs.build-and-test.result == 'success' }}
    runs-on: [self-hosted, Linux]
    needs:
      - build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download success markers
        uses: actions/download-artifact@v4
        with:
          pattern: success-marker-*
          path: /tmp/success-markers
          merge-multiple: true

      - name: Collect successful directories
        id: collect-dirs
        run: |
          SUCCESSFUL_DIRS=""
          if [ -d "/tmp/success-markers" ]; then
            for file in /tmp/success-markers/*.txt; do
              if [ -f "$file" ]; then
                dir=$(cat "$file")
                SUCCESSFUL_DIRS="$SUCCESSFUL_DIRS $dir"
              fi
            done
          fi
          
          SUCCESSFUL_DIRS=$(echo $SUCCESSFUL_DIRS | tr -s ' ' | sed 's/^ *//' | sed 's/ *$//')
          echo "directories=$SUCCESSFUL_DIRS" >> $GITHUB_OUTPUT
          echo "Found successful directories: $SUCCESSFUL_DIRS"

      - name: Configure git
        run: |
          git config user.email "pro@brandonguigo.com"
          git config user.name "GitHub Actions"

      - name: Cache cocogitto
        id: cache-cocogitto
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin/cog
          key: cocogitto-${{ env.OS }}-v${{ env.COCOGITTO_VERSION }}

      - name: Install Rust
        if: steps.cache-cocogitto.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Install Cocogitto
        if: steps.cache-cocogitto.outputs.cache-hit != 'true'
        run: |
          # only install cocogitto if it's not already installed
          if ! command -v cog &> /dev/null; then
            cargo install cocogitto --version ${{ env.COCOGITTO_VERSION }}
          fi
        env:
          RUSTFLAGS: --cfg procmacro2_semver_exempt

      - name: Bump versions for all successful microservices
        id: bump-versions
        run: |
          SUCCESSFUL_DIRS="${{ steps.collect-dirs.outputs.directories }}"
          
          if [ -z "$SUCCESSFUL_DIRS" ]; then
            echo "No successful directories found"
            exit 0
          fi
          
          echo "Bumping versions for: $SUCCESSFUL_DIRS"
          
          # Bump version for each successful microservice and capture new tags
          TAGS_TO_PUSH=""
          for dir in $SUCCESSFUL_DIRS; do
            if [ -d "$dir" ]; then
              echo "Bumping version for $dir"
              bump_output=$(./.github/scripts/bump.sh "$dir" 2>&1) || {
                echo "Bump script failed for $dir with output: $bump_output"
                # Check if it's the expected "no conventional commits" case
                if echo "$bump_output" | grep -q "No conventional commits found to bump version"; then
                  echo "No conventional commits found for $dir - this is expected and considered successful"
                  continue
                else
                  echo "Unexpected error for $dir"
                  exit 1
                fi
              }
              echo "$bump_output"
              
              # Extract the NEW_TAG from the output
              NEW_TAG=$(echo "$bump_output" | grep "^NEW_TAG:" | cut -d: -f2)
              if [ -n "$NEW_TAG" ]; then
                TAGS_TO_PUSH="$TAGS_TO_PUSH $NEW_TAG"
                echo "New tag for $dir: $NEW_TAG"
              fi
            fi
          done
          
          echo "tags_to_push=$TAGS_TO_PUSH" >> $GITHUB_OUTPUT
          echo "successful_dirs=$SUCCESSFUL_DIRS" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            # Add all CHANGELOG.md files
            git add */CHANGELOG.md
            
            # Create commit message with all updated microservices
            COMMIT_MSG="chore(release): bump versions for"
            TAGS_TO_PUSH="${{ steps.bump-versions.outputs.tags_to_push }}"
            
            # Convert TAGS_TO_PUSH string to array
            IFS=' ' read -ra TAGS_ARRAY <<< "$TAGS_TO_PUSH"
            
            for dir in ${{ steps.bump-versions.outputs.successful_dirs }}; do
              if [ -d "$dir" ]; then
                # Find the tag for this directory
                for tag in "${TAGS_ARRAY[@]}"; do
                  if [[ "$tag" == "${dir}/v"* ]]; then
                    COMMIT_MSG="$COMMIT_MSG $dir@$tag"
                    break
                  fi
                done
              fi
            done
            COMMIT_MSG="$COMMIT_MSG [skip ci]"
            
            git commit -m "$COMMIT_MSG"
            
            # Push the commit
            git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main
            
            # Push all tags
            for tag in ${{ steps.bump-versions.outputs.tags_to_push }}; do
              git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git tag "$tag"
            done
          else
            echo "No changes to commit"
          fi

      - name: Prepare Docker build matrix
        id: prepare-matrix
        run: |
          SUCCESSFUL_DIRS="${{ steps.bump-versions.outputs.successful_dirs }}"
          TAGS_TO_PUSH="${{ steps.bump-versions.outputs.tags_to_push }}"
          
          if [ -z "$SUCCESSFUL_DIRS" ]; then
            echo "No successful directories found"
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          MATRIX_JSON='{"include":['
          FIRST=true
          
          # Convert TAGS_TO_PUSH string to array
          IFS=' ' read -ra TAGS_ARRAY <<< "$TAGS_TO_PUSH"
          
          for dir in $SUCCESSFUL_DIRS; do
            if [ -d "$dir" ] && [ "$dir" != "grpc" ] && [ "$dir" != "shared" ]; then
              # Find the tag for this directory
              TAG=""
              for tag in "${TAGS_ARRAY[@]}"; do
                if [[ "$tag" == "${dir}/v"* ]]; then
                  TAG="$tag"
                  break
                fi
              done
              
              if [ -n "$TAG" ]; then
                VERSION=$(echo $TAG | sed 's/^[^/]*\/v//')
                
                if [ "$FIRST" = "true" ]; then
                  FIRST=false
                else
                  MATRIX_JSON="$MATRIX_JSON,"
                fi
                
                MATRIX_JSON="$MATRIX_JSON{\"dir\":\"$dir\",\"version\":\"$VERSION\",\"tag\":\"$TAG\"}"
              fi
            else
              echo "Skipping directory $dir (grpc or shared library)"
            fi
          done
          
          MATRIX_JSON="$MATRIX_JSON]}"
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Docker build matrix: $MATRIX_JSON"

    outputs:
      docker_matrix: ${{ steps.prepare-matrix.outputs.matrix }}
      all_successful_dirs: ${{ steps.bump-versions.outputs.successful_dirs }}
      tags_to_push: ${{ steps.bump-versions.outputs.tags_to_push }}

  build-docker-images:
    if: ${{ needs.release.outputs.docker_matrix != '' && fromJson(needs.release.outputs.docker_matrix).include[0] != null }}
    runs-on: [self-hosted, Linux]
    needs: release
    strategy:
      matrix: ${{ fromJson(needs.release.outputs.docker_matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image for ${{ matrix.dir }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.dir }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/atomic-blend/${{ matrix.dir }}:${{ matrix.version }}

  prepare-github-releases:
    runs-on: [self-hosted, Linux]
    needs: 
      - build-docker-images
      - release
    if: always() && (needs.build-docker-images.result == 'success' || needs.build-docker-images.result == 'skipped') && needs.release.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Prepare release matrix
        id: prepare-release-matrix
        run: |
          # Use the same tags that were used in Docker builds
          DOCKER_MATRIX='${{ needs.release.outputs.docker_matrix }}'
          ALL_SUCCESSFUL_DIRS="${{ needs.release.outputs.all_successful_dirs }}"
          TAGS_TO_PUSH="${{ needs.release.outputs.tags_to_push }}"
          
          if [ -z "$ALL_SUCCESSFUL_DIRS" ]; then
            echo "No successful directories found"
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          MATRIX_JSON='{"include":['
          FIRST=true
          
          # Parse the Docker matrix to get the tags that were actually built
          DOCKER_INCLUDE=$(echo "$DOCKER_MATRIX" | jq -r '.include[] | "\(.dir):\(.version):\(.tag)"' 2>/dev/null || echo "")
          
          # Convert TAGS_TO_PUSH string to array for grpc lookup
          IFS=' ' read -ra TAGS_ARRAY <<< "$TAGS_TO_PUSH"
          
          for dir in $ALL_SUCCESSFUL_DIRS; do
            if [ -d "$dir" ]; then
              # First, try to find the tag from cocogitto bump step
              COCOGITTO_TAG=""
              for tag in "${TAGS_ARRAY[@]}"; do
                if [[ "$tag" == "${dir}/v"* ]]; then
                  COCOGITTO_TAG="$tag"
                  break
                fi
              done
              
              if [ -n "$COCOGITTO_TAG" ]; then
                # Use the tag from cocogitto
                TAG="$COCOGITTO_TAG"
                VERSION=$(echo $TAG | sed 's/^[^/]*\/v//')
              else
                # Fallback to Docker build matrix for all directories
                DOCKER_ENTRY=$(echo "$DOCKER_INCLUDE" | grep "^${dir}:" || echo "")
                if [ -n "$DOCKER_ENTRY" ]; then
                  VERSION=$(echo "$DOCKER_ENTRY" | cut -d: -f2)
                  TAG=$(echo "$DOCKER_ENTRY" | cut -d: -f3)
                else
                  # Final fallback to git tags
                  TAG_PREFIX="${dir}/v"
                  TAG=$(git tag --list "${TAG_PREFIX}*" | sort -V | tail -n 1)
                  VERSION=$(echo $TAG | sed 's/^[^/]*\/v//')
                fi
              fi
              
              if [ -n "$TAG" ] && [ -n "$VERSION" ]; then
                if [ "$FIRST" = "true" ]; then
                  FIRST=false
                else
                  MATRIX_JSON="$MATRIX_JSON,"
                fi
                
                # Add type field to distinguish between grpc and docker services
                if [ "$dir" == "grpc" ]; then
                  MATRIX_JSON="$MATRIX_JSON{\"dir\":\"$dir\",\"version\":\"$VERSION\",\"tag\":\"$TAG\",\"type\":\"grpc\"}"
                else
                  MATRIX_JSON="$MATRIX_JSON{\"dir\":\"$dir\",\"version\":\"$VERSION\",\"tag\":\"$TAG\",\"type\":\"docker\"}"
                fi
              fi
            fi
          done
          
          MATRIX_JSON="$MATRIX_JSON]}"
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Release matrix: $MATRIX_JSON"

    outputs:
      release_matrix: ${{ steps.prepare-release-matrix.outputs.matrix }}

  create-consolidated-release:
    if: ${{ needs.prepare-github-releases.outputs.release_matrix != '' && fromJson(needs.prepare-github-releases.outputs.release_matrix).include[0] != null }}
    runs-on: [self-hosted, Linux]
    needs: prepare-github-releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate consolidated release notes
        id: generate-release-notes
        run: |
          RELEASE_MATRIX='${{ needs.prepare-github-releases.outputs.release_matrix }}'
          RELEASE_INCLUDE=$(echo "$RELEASE_MATRIX" | jq -r '.include[] | "\(.dir):\(.version):\(.tag):\(.type)"' 2>/dev/null || echo "")
          
          # Generate timestamp for the consolidated release
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")
          
          # Start building the consolidated release notes
          cat > consolidated_release_notes.md << EOF
          # Stable Release - $TIMESTAMP
          
          This is a consolidated stable release from the main branch.
          
          ## 📦 Released Components
          
          EOF
          
          # Process each component
          DOCKER_SERVICES=""
          GRPC_SERVICES=""
          
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              DIR=$(echo "$line" | cut -d: -f1)
              VERSION=$(echo "$line" | cut -d: -f2)
              TAG=$(echo "$line" | cut -d: -f3)
              TYPE=$(echo "$line" | cut -d: -f4)
              
              if [ "$TYPE" == "docker" ]; then
                DOCKER_SERVICES="$DOCKER_SERVICES\n- **$DIR**: v$VERSION"
                DOCKER_SERVICES="$DOCKER_SERVICES\n  - 🐳 Docker Image: \`ghcr.io/atomic-blend/$DIR:$VERSION\`"
                DOCKER_SERVICES="$DOCKER_SERVICES\n  - 🏷️ Tag: \`$TAG\`"
              elif [ "$TYPE" == "grpc" ]; then
                GRPC_SERVICES="$GRPC_SERVICES\n- **$DIR**: v$VERSION"
                GRPC_SERVICES="$GRPC_SERVICES\n  - 🏷️ Tag: \`$TAG\`"
                GRPC_SERVICES="$GRPC_SERVICES\n  - 📋 gRPC Protocol Definitions"
              fi
            fi
          done <<< "$RELEASE_INCLUDE"
          
          # Add Docker services section
          if [ -n "$DOCKER_SERVICES" ]; then
            echo -e "\n### 🐳 Microservices" >> consolidated_release_notes.md
            echo -e "$DOCKER_SERVICES" >> consolidated_release_notes.md
          fi
          
          # Add gRPC services section
          if [ -n "$GRPC_SERVICES" ]; then
            echo -e "\n### 📋 Shared Libraries" >> consolidated_release_notes.md
            echo -e "$GRPC_SERVICES" >> consolidated_release_notes.md
          fi
          
          # Add footer
          cat >> consolidated_release_notes.md << EOF
          
          ---
          
          *This release was automatically generated by the CI/CD pipeline.*
          EOF
          
          # Create a consolidated tag name
          echo "consolidated_tag=release-$(date -u +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: Create Consolidated GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.generate-release-notes.outputs.consolidated_tag }}
          name: "Stable Release - $(date -u +'%Y-%m-%d %H:%M UTC')"
          body_path: consolidated_release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
