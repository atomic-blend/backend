version: "3.8"
name: atomic-blend
services:
  reverse-proxy:
    image: nginx:alpine
    container_name: reverse-proxy
    ports:
      - "80:80"
    volumes:
      - ../nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth
      - productivity
      - mail
      - mail-server
    restart: unless-stopped

  auth:
    image: ghcr.io/atomic-blend/auth:${AUTH_SERVICE_VERSION:-latest}
    container_name: auth
    expose:
      - "8080"
      - "50051" # gRPC port
    environment:
      - CORS_ALLOWED_ORIGINS=https://task.${PUBLIC_ADDRESS},https://notes.${PUBLIC_ADDRESS},https://mail.${PUBLIC_ADDRESS}
      - CORS_ALLOWED_METHODS=GET,POST,PUT,PATCH,DELETE,OPTIONS
      - CORS_ALLOWED_HEADERS=Content-Type,Authorization,X-Requested-With,Accept,Origin
      - CORS_ALLOW_CREDENTIALS=true
    volumes:
      - type: bind
        source: ${HOME}${USERPROFILE}/.netrc
        target: /root/.netrc
    working_dir: /workspace/auth
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    restart: unless-stopped

  mail-server:
    image: ghcr.io/atomic-blend/mail-server:${MAIL_SERVER_SERVICE_VERSION:-latest}
    container_name: mail-server
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rspamd:
        condition: service_started
    ports:
      - target: 1025
        published: 1025
        protocol: tcp
        mode: host
    env_file:
      - .env
    volumes:
      - type: bind
        source: ${HOME}${USERPROFILE}/.netrc
        target: /root/.netrc
      - type: bind
        source: ./private.key
        target: /dkim_private_key.pem
    restart: unless-stopped

  mail:
    image: ghcr.io/atomic-blend/mail:${MAIL_SERVICE_VERSION:-latest}
    container_name: mail
    expose:
      - "8080"
      - "50051" # gRPC port
    volumes:
      - type: bind
        source: ${HOME}${USERPROFILE}/.netrc
        target: /root/.netrc
      # - type: bind
      #   source: ./firebase-adminsdk-prod.json
      #   target: /app/firebase_sac.json
    environment:
      - CORS_ALLOWED_ORIGINS=https://task.${PUBLIC_ADDRESS},https://notes.${PUBLIC_ADDRESS},https://mail.${PUBLIC_ADDRESS}
      - CORS_ALLOWED_METHODS=GET,POST,PUT,PATCH,DELETE,OPTIONS
      - CORS_ALLOWED_HEADERS=Content-Type,Authorization,X-Requested-With,Accept,Origin
      - CORS_ALLOW_CREDENTIALS=true
    networks:
      - default
      - rspamd
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    env_file:
      - .env
    restart: unless-stopped

  productivity:
    image: ghcr.io/atomic-blend/productivity:${PRODUCTIVITY_SERVICE_VERSION:-latest}
    container_name: productivity
    expose:
      - "8080"
      - "50051" # gRPC port
    volumes:
      - type: bind
        source: ${HOME}${USERPROFILE}/.netrc
        target: /root/.netrc
    environment:
      - CORS_ALLOWED_ORIGINS=https://task.${PUBLIC_ADDRESS},https://notes.${PUBLIC_ADDRESS},https://mail.${PUBLIC_ADDRESS}
      - CORS_ALLOWED_METHODS=GET,POST,PUT,PATCH,DELETE,OPTIONS
      - CORS_ALLOWED_HEADERS=Content-Type,Authorization,X-Requested-With,Accept,Origin
      - CORS_ALLOW_CREDENTIALS=true
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    restart: unless-stopped

  task-app:
    image: ghcr.io/atomic-blend/task-app:${TASK_APP_VERSION:-latest}
    container_name: task-app
    env_file:
      - .env
    environment:
      - PUBLIC_ADDRESS=${PUBLIC_ADDRESS}
      - HTTPS=${HTTPS:-false}
    volumes:
      - ./bootstrap.sh:/bootstrap.sh:ro
      - ./app-nginx.conf:/etc/nginx/nginx.conf:ro
    command: >
      sh -c "sh /bootstrap.sh && nginx -c /etc/nginx/nginx.conf -g 'daemon off;'"
    ports:
      - "8083:80"
    restart: unless-stopped

  notes-app:
    image: ghcr.io/atomic-blend/notes-app:${NOTES_APP_VERSION:-latest}
    container_name: notes-app
    env_file:
      - .env
    environment:
      - PUBLIC_ADDRESS=${PUBLIC_ADDRESS}
      - HTTPS=${HTTPS:-false}
    volumes:
      - ./bootstrap.sh:/bootstrap.sh:ro
      - ./app-nginx.conf:/etc/nginx/nginx.conf:ro
    command: >
      sh -c "sh /bootstrap.sh && nginx -c /etc/nginx/nginx.conf -g 'daemon off;'"
    ports:
      - "8082:80"
    restart: unless-stopped
  mail-app:
    image: ghcr.io/atomic-blend/mail-app:${MAIL_APP_VERSION:-latest}
    container_name: mail-app
    env_file:
      - .env
    environment:
      - PUBLIC_ADDRESS=${PUBLIC_ADDRESS}
      - HTTPS=${HTTPS:-false}
    volumes:
      - ./bootstrap.sh:/bootstrap.sh:ro
      - ./app-nginx.conf:/etc/nginx/nginx.conf:ro
    command: >
      sh -c "sh /bootstrap.sh && nginx -c /etc/nginx/nginx.conf -g 'daemon off;'"
    ports:
      - "8081:80"
    restart: unless-stopped

  mongodb:
    image: mongo:${MONGODB_VERSION:-8.0.4}
    container_name: mongodb-atomic-blend
    entrypoint: >
      /bin/bash -c '
      openssl rand -base64 756 > /data/keyfile.key &&
      chmod 400 /data/keyfile.key &&
      chown mongodb:mongodb /data/keyfile.key &&
      /usr/local/bin/docker-entrypoint.sh mongod --replSet rs0 --keyFile /data/keyfile.key --bind_ip_all'
    restart: always
    ports:
      - 127.0.0.1:27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_user
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: cloudlinker
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    healthcheck:
      test: mongosh
        -u $${MONGO_INITDB_ROOT_USERNAME}
        -p $${MONGO_INITDB_ROOT_PASSWORD}
        --eval "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongodb:27017',priority:1}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    

  rabbitmq:
    image: rabbitmq:${RABBITMQ_VERSION:-4.1.2-management}
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "rabbitmq-diagnostics check_running && rabbitmq-diagnostics check_local_alarms",
        ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 30s
      start_interval: 2s

  rspamd:
    image: rspamd/rspamd:${RSPAMD_VERSION:-latest}
    container_name: rspamd-compose-rspamd
    depends_on:
      - rspamd-unbound
      - rspamd-redis
    environment:
      - RSPAMD_DNS_SERVERS=round-robin:192.0.3.254:53
      - RSPAMD_REDIS_SERVERS=rspamd-compose-redis
      - RSPAMD_USE_BAYES=1
    #      - RSPAMD_USE_GREYLIST=1
    networks:
      - rspamd
    ports:
      - "11332:11332"
      - "11333:11333"
      - "11334:11334"
    # recommended for production
    #    read_only: true
    volumes:
      - rspamd-compose-rspamd-dbdir:/var/lib/rspamd
    restart: unless-stopped

  rspamd-redis:
    container_name: rspamd-compose-redis
    command: "redis-server --save 60 1 --loglevel warning"
    image: "redis:${REDIS_VERSION:-latest}"
    expose:
      - "6379"
    sysctls:
      - net.core.somaxconn=4096
    networks:
      - rspamd
    volumes:
      - rspamd-compose-redis-data:/data
    restart: unless-stopped

  rspamd-unbound:
    image: alpinelinux/unbound:${UNBOUND_VERSION:-latest}
    container_name: rspamd-compose-unbound
    networks:
      rspamd:
        ipv4_address: 192.0.3.254
    restart: unless-stopped

  minio:
    image: minio/minio
    restart: unless-stopped
    ports:
      - "9000:9000" # MinIO API
      - "9001:9001" # MinIO Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --console-address ":9001" /data --address ":9000"
    volumes:
      - minio_data:/data
    
  minio-setup:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set local http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb local/ab-files;
      /usr/bin/mc anonymous set public local/ab-files;
      exit 0;
      "

networks:
  rspamd:
    ipam:
      config:
        - subnet: 192.0.3.0/24

volumes:
  rabbitmq_data:
  mongo_data:
  mongo_config:
  rspamd-compose-redis-data:
  rspamd-compose-rspamd-dbdir:
  minio_data:
