version: 2.1

orbs:
  go: circleci/go@1.7

jobs:
  test-coverage:
    docker:
      - image: cimg/go:1.23
    resource_class: small
    working_directory: ~/project

    steps:
      - checkout:
          path: ~/project

      - setup_remote_docker:
          docker_layer_caching: true

      - go/load-cache

      - go/mod-download

      - go/save-cache

      - run:
          name: Run linting
          command: |
            go install golang.org/x/lint/golint@latest
            golint -set_exit_status ./...

      - run:
          name: Run tests with coverage
          command: |
            go test -coverprofile=coverage.out -v ./...
            go tool cover -html=coverage.out -o coverage.html

      - store_artifacts:
          path: coverage.html
          destination: coverage-report

  bump-version:
    docker:
      - image: ghcr.io/cocogitto/cog:latest
    resource_class: small
    working_directory: ~/project
    steps:  
      - checkout:
          path: ~/project
      
      - setup_remote_docker:
          docker_layer_caching: true
      
      - run:
          name: Check conventional commits validity
          command: |
            cog --check
      - run:
          name: Bump version
          command: |
            cog bump --auto
      - run:
          name: Commit and push changes
          command: |
            git config --global user.email "pro@brandonguigo.com"
            git config --global user.name "CircleCI"
            git add CHANGELOG.md
            git add $(git describe --abbrev=0 --tags)
            git commit -m "chore(release): $(git describe --abbrev=0 --tags)"
            git push origin HEAD:main
  
  build-docker-images:
    docker:
      - image: cimg/base:2025.03
    resource_class: small
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: |
            TAG=$(git describe --abbrev=0 --tags)
            echo "Building Docker image with tag $TAG"
            docker build -t ghcr.io/$GITHUB_ORG_NAME/$GITHUB_REPO_NAME:$TAG .
            echo "Docker image built successfully"
      - run:
          name: Push application Docker image
          command: |
            TAG=$(git describe --abbrev=0 --tags)
            echo "Pushing Docker image with tag $TAG"
            echo $GITHUB_PAT | docker login -u ghcr.io --password-stdin
            docker push ghcr.io/$GITHUB_ORG_NAME/$GITHUB_REPO_NAME:$TAG
            echo "Docker image pushed successfully"

workflows:
  version: 2
  main:
    jobs:
      - test-coverage
      - bump-version
      - build-docker-images
      
