# CircleCI configuration file
version: 2.1

# Import required orbs
orbs:
  go: circleci/go@1.7 # Go orb for Go-related commands and caching
  codecov: codecov/codecov@5.3.0 # Codecov orb for uploading coverage reports
  aws-ecs: circleci/aws-ecs@7.0.0
  aws-cli: circleci/aws-cli@5.2.0
# Parameters
parameters:
  cocogitto_version:
    type: string
    default: "6.2.0" # Set your desired default version here

# Job definitions
jobs:
  # Job to run tests and generate coverage reports
  test-coverage:
    # Using machine executor instead of Docker for more flexibility
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    working_directory: ~/project

    steps:
      - checkout:
          path: ~/project

      - go/load-cache # Load Go module cache if available

      - go/mod-download # Download Go modules

      - go/save-cache # Save Go module cache for future runs

      - run:
          name: Run linting
          command: |
            go install golang.org/x/lint/golint@latest
            golint -set_exit_status ./...

      - run:
          name: Run tests with coverage
          command: |
            go test -coverprofile=coverage.out -v ./...
            go tool cover -html=coverage.out -o coverage.html

      - store_artifacts:
          path: coverage.html
          destination: coverage-report

      - codecov/upload:
          files: "coverage.out"
          slug: atomic-blend/backend

  # Job to automatically bump version using conventional commits
  bump-version:
    parameters:
      cocogitto_version:
        type: string
        default: << pipeline.parameters.cocogitto_version >>
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project

      - run:
          name: Configure git
          command: |
            git config credential.helper 'cache --timeout=120'
            git config user.email "pro@brandonguigo.com"
            git config user.name "CircleCI"

      # Check for cached cocogitto installation
      - restore_cache:
          keys:
            - cocogitto-v<< parameters.cocogitto_version >>

      # Check if cocogitto is installed from cache
      - run:
          name: Check for cached cocogitto
          command: |
            if [ -f "/home/circleci/.cargo/bin/cog" ]; then
              echo "Cocogitto found in cache"
              /home/circleci/.cargo/bin/cog --version
              echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV
              source $BASH_ENV
            else
              echo "Cocogitto not found in cache, will install"
            fi

      # Install Rust and Cocogitto if not in cache
      - run:
          name: Download rustup
          command: |
            if [ ! -f "/home/circleci/.cargo/bin/cog" ]; then
              wget https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init
              chmod +x rustup-init
            fi

      - run:
          name: Install Rust
          command: |
            if [ ! -f "/home/circleci/.cargo/bin/cog" ]; then
              ./rustup-init -y --no-modify-path --default-toolchain nightly
              rm rustup-init
              echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV
              source $BASH_ENV
            fi

      - run:
          name: Install Cocogitto
          command: |
            if [ ! -f "/home/circleci/.cargo/bin/cog" ]; then
              cargo install cocogitto --version << parameters.cocogitto_version >>
            fi
          environment:
            RUSTFLAGS: --cfg procmacro2_semver_exempt

      # Save cache after installation
      - save_cache:
          key: cocogitto-v<< parameters.cocogitto_version >>
          paths:
            - /home/circleci/.cargo/bin/cog
            - /home/circleci/.cargo/registry
            - /home/circleci/.cargo/bin/cargo-install-update
            - /home/circleci/.cargo/bin/cargo-update

      - run:
          name: Check conventional commits validity
          command: |
            cog check

      - run:
          name: Bump version
          command: |
            cog bump --auto

      - run:
          name: Commit and push changes
          command: |
            # Check if there are changes to commit
            if git diff --quiet HEAD; then
              echo "No changes to commit"
            else
              git add CHANGELOG.md
              git commit -m "chore(release): $(git describe --abbrev=0 --tags) [skip ci]"
            fi
            git push https://${GITHUB_PAT}@github.com/${GITHUB_ORG_NAME}/${GITHUB_REPO_NAME}.git main
            git push https://${GITHUB_PAT}@github.com/${GITHUB_ORG_NAME}/${GITHUB_REPO_NAME}.git tag $(git describe --abbrev=0 --tags)

  # Job to build and push Docker images
  build-docker-images:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project

      - run:
          name: Build Docker image
          command: |
            TAG=$(git describe --abbrev=0 --tags)
            echo "Building Docker image with tag $TAG"
            docker build -t ghcr.io/$GITHUB_ORG_NAME/$GITHUB_REPO_NAME:$TAG .
            echo "Docker image built successfully"

      - run:
          name: Push application Docker image
          command: |
            TAG=$(git describe --abbrev=0 --tags)
            echo "Pushing Docker image with tag $TAG"
            docker login -u $GITHUB_USERNAME -p $GITHUB_PAT ghcr.io
            docker push ghcr.io/$GITHUB_ORG_NAME/$GITHUB_REPO_NAME:$TAG
            echo "Docker image pushed successfully"

  update-manifest:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Update manifest
          command: |
            TAG=$(git describe --abbrev=0 --tags)
            echo "Fetching infra"
            cd ..
            git clone https://${GITHUB_PAT}@github.com/${GITHUB_ORG_NAME}/infra.git
            cd infra
            echo "Installing yq"
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64  
            sudo chmod a+x /usr/local/bin/yq
            yq --version
            echo "Updating manifest with tag $TAG"
            cd kubernetes/values
            yq eval '.manifest.backend.version = "'$TAG'"' -i manifest.yaml
            git config user.email "pro@brandonguigo.com"
            git config user.name "CircleCI"
            git add manifest.yaml
            git commit -m "chore(release): update backend version to $TAG [skip ci]"
            git push https://${GITHUB_PAT}@github.com/${GITHUB_ORG_NAME}/infra.git main
            echo "Manifest updated successfully"

  deploy-to-ecs:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Get tag
          command: |
            TAG=$(git describe --abbrev=0 --tags)
            echo "Deploying to ECS with tag $TAG"
            echo "export TAG='${TAG}'" >> "$BASH_ENV"
      # - aws-cli/setup:
      #     profile_name: OIDC-PROFILE
      #     region: AWS_REGION
      #     role_arn: arn:aws:iam::123456789012:role/OIDC_ARN
      #     role_session_name: example-session-name
      #     session_duration: '3600'
      - aws-cli/setup:
          profile_name: default
          region: $AWS_REGION
      - aws-ecs/update_service:
          cluster: "prod"
          region: $AWS_REGION
          container_image_name_updates: container=backend,tag=$TAG
          family: prod

  verify_deployment:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Get tag
          command: |
            TAG=$(git describe --abbrev=0 --tags)
            echo "Deploying to ECS with tag $TAG"
            echo "export TAG='${TAG}'" >> "$BASH_ENV"
      - aws-cli/setup:
          profile_name: default
          region: $AWS_REGION
      - run:
          name: Get last task definition
          command: >
            TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                --task-definition prod \
                --output text \
                --query 'taskDefinition.taskDefinitionArn')
            echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >> "$BASH_ENV"
      - aws-ecs/verify_revision_is_deployed:
          family: "prod"
          region: $AWS_REGION
          cluster: "prod"
          task_definition_arn: "${TASK_DEFINITION_ARN}"

  create_github_release:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - go/load-cache # Load Go module cache if available

      - go/mod-download # Download Go modules

      - go/save-cache # Save Go module cache for future runs

      - run:
          name: Install ghr
          command: |
            go install github.com/tcnksm/ghr@latest
      - run:
          name: Create GitHub Release
          command: |
            echo "Creating GitHub release"
            TAG=$(git describe --abbrev=0 --tags)
            echo "Release tag: $TAG"

            # Extract changelog for the current version - improved approach
            # Handle tags with or without 'v' prefix
            CLEAN_TAG=$(echo "$TAG" | sed 's/^v//')
            echo "Clean tag for changelog matching: $CLEAN_TAG"

            CHANGELOG=""
            if [ -f "CHANGELOG.md" ]; then
              # First try exact match with the tag format in the file
              CHANGELOG=$(sed -n "/^## $TAG - /,/^## /p" CHANGELOG.md | sed '1d;$d')
              
              # If nothing found, try without the 'v' prefix
              if [ -z "$CHANGELOG" ]; then
                CHANGELOG=$(sed -n "/^## $CLEAN_TAG - /,/^## /p" CHANGELOG.md | sed '1d;$d')
              fi
              
              # If still nothing, look for formats like [x.y.z]
              if [ -z "$CHANGELOG" ]; then
                CHANGELOG=$(sed -n "/^## \[$CLEAN_TAG\] - /,/^## /p" CHANGELOG.md | sed '1d;$d')
              fi
            fi

            echo "CHANGELOG content:"
            echo "$CHANGELOG"

            echo "Release $TAG" > release_notes.md
            echo "" >> release_notes.md
            echo "$CHANGELOG" >> release_notes.md

            echo "Release notes: $(cat release_notes.md)"

            echo "Creating GitHub release with tag $TAG"
            ghr -t ${GITHUB_PAT} \
                -u ${GITHUB_ORG_NAME} \
                -r ${GITHUB_REPO_NAME} \
                -n "v$TAG" \
                -b "$(cat release_notes.md)" \
                -c $(git rev-parse HEAD) \
                $TAG 
            echo "GitHub release created successfully"

# Workflow definition
workflows:
  version: 2
  main:
    jobs:
      - test-coverage
      - bump-version:
          requires:
            - test-coverage
      - build-docker-images:
          requires:
            - bump-version
      # - update-manifest:
      #     requires:
      #       - build-docker-images
      - deploy-to-ecs:
          requires:
            - build-docker-images
      - verify_deployment:
          requires:
            - deploy-to-ecs
      - create_github_release:
          requires:
            - verify_deployment
