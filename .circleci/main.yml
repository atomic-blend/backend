# CircleCI configuration file
version: 2.1

# Import required orbs
orbs:
  go: circleci/go@1.7 # Go orb for Go-related commands and caching

# Parameters
parameters:
  cocogitto_version:
    type: string
    default: "6.2.0" # Set your desired default version here

# Job definitions
jobs:
  # Job to run tests and generate coverage reports
  test-coverage:
    # Using machine executor instead of Docker for more flexibility
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    working_directory: ~/project

    steps:
      - checkout:
          path: ~/project

      - go/load-cache # Load Go module cache if available

      - go/mod-download # Download Go modules

      - go/save-cache # Save Go module cache for future runs

      - run:
          name: Run linting
          command: |
            go install golang.org/x/lint/golint@latest
            golint -set_exit_status ./...

      - run:
          name: Run tests with coverage
          command: |
            go test -coverprofile=coverage.out -v ./...
            go tool cover -html=coverage.out -o coverage.html

      - store_artifacts:
          path: coverage.html
          destination: coverage-report

  # Job to automatically bump version using conventional commits
  bump-version:
    parameters:
      cocogitto_version:
        type: string
        default: << pipeline.parameters.cocogitto_version >>
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project

      - run:
          name: Configure git
          command: |
            git config credential.helper 'cache --timeout=120'
            git config user.email "pro@brandonguigo.com"
            git config user.name "CircleCI"

      # Check for cached cocogitto installation
      - restore_cache:
          keys:
            - cocogitto-v<< parameters.cocogitto_version >>

      # Check if cocogitto is installed from cache
      - run:
          name: Check for cached cocogitto
          command: |
            if [ -f "/home/circleci/.cargo/bin/cog" ]; then
              echo "Cocogitto found in cache"
              /home/circleci/.cargo/bin/cog --version
              echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV
              source $BASH_ENV
            else
              echo "Cocogitto not found in cache, will install"
            fi

      # Install Rust and Cocogitto if not in cache
      - run:
          name: Download rustup
          command: |
            if [ ! -f "/home/circleci/.cargo/bin/cog" ]; then
              wget https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init
              chmod +x rustup-init
            fi

      - run:
          name: Install Rust
          command: |
            if [ ! -f "/home/circleci/.cargo/bin/cog" ]; then
              ./rustup-init -y --no-modify-path --default-toolchain nightly
              rm rustup-init
              echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV
              source $BASH_ENV
            fi

      - run:
          name: Install Cocogitto
          command: |
            if [ ! -f "/home/circleci/.cargo/bin/cog" ]; then
              cargo install cocogitto --version << parameters.cocogitto_version >>
            fi
          environment:
            RUSTFLAGS: --cfg procmacro2_semver_exempt

      # Save cache after installation
      - save_cache:
          key: cocogitto-v<< parameters.cocogitto_version >>
          paths:
            - /home/circleci/.cargo/bin/cog
            - /home/circleci/.cargo/registry
            - /home/circleci/.cargo/bin/cargo-install-update
            - /home/circleci/.cargo/bin/cargo-update

      - run:
          name: Check conventional commits validity
          command: |
            cog check

      - run:
          name: Bump version
          command: |
            cog bump --auto

      - run:
          name: Commit and push changes
          command: |
            # Check if there are changes to commit
            if git diff --quiet HEAD; then
              echo "No changes to commit"
            else
              git add CHANGELOG.md
              git commit -m "chore(release): $(git describe --abbrev=0 --tags) [skip ci]"
            fi
            git push https://${GITHUB_PAT}@github.com/${GITHUB_ORG_NAME}/${GITHUB_REPO_NAME}.git main
            git push https://${GITHUB_PAT}@github.com/${GITHUB_ORG_NAME}/${GITHUB_REPO_NAME}.git tag $(git describe --abbrev=0 --tags)

  # Job to build and push Docker images
  build-docker-images:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project

      - run:
          name: Build Docker image
          command: |
            TAG=$(git describe --abbrev=0 --tags)
            echo "Building Docker image with tag $TAG"
            docker build -t ghcr.io/$GITHUB_ORG_NAME/$GITHUB_REPO_NAME:$TAG .
            echo "Docker image built successfully"

      - run:
          name: Push application Docker image
          command: |
            TAG=$(git describe --abbrev=0 --tags)
            echo "Pushing Docker image with tag $TAG"
            docker login -u $GITHUB_USERNAME -p $GITHUB_PAT ghcr.io
            docker push ghcr.io/$GITHUB_ORG_NAME/$GITHUB_REPO_NAME:$TAG
            echo "Docker image pushed successfully"

  update-manifest:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Update manifest
          command: |
            echo "Fetching submodule"
            git submodule sync
            git submodule update --init
            TAG=$(git describe --abbrev=0 --tags)
            echo "Installing yq"
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64  
            sudo chmod a+x /usr/local/bin/yq
            yq --version
            echo "Updating manifest with tag $TAG"
            cd infra/kubernetes/values
            yq eval '.backend.version = "'$TAG'"' -i backend-values.yaml
            git config user.email "pro@brandonguigo.com"
            git config user.name "CircleCI"
            git add backend-values.yaml
            git commit -m "chore(release): update backend version to $TAG [skip ci]"
            git push https://${GITHUB_PAT}@github.com/${GITHUB_ORG_NAME}/infra.git main
            echo "Manifest updated successfully"

# Workflow definition
workflows:
  version: 2
  main:
    jobs:
      - test-coverage
      - bump-version:
          requires:
            - test-coverage
      - build-docker-images:
          requires:
            - bump-version
      - update-manifest:
          requires:
            - build-docker-images
