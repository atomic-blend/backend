// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mail-server/v1/mail_server_service.proto

package mailv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/atomic-blend/backend/grpc/gen/mail-server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MailServiceName is the fully-qualified name of the MailService service.
	MailServiceName = "mail.v1.MailService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MailServiceSendMailNoReplyProcedure is the fully-qualified name of the MailService's
	// SendMailNoReply RPC.
	MailServiceSendMailNoReplyProcedure = "/mail.v1.MailService/SendMailNoReply"
)

// MailServiceClient is a client for the mail.v1.MailService service.
type MailServiceClient interface {
	SendMailNoReply(context.Context, *connect.Request[v1.SendMailNoReplyRequest]) (*connect.Response[v1.SendMailNoReplyResponse], error)
}

// NewMailServiceClient constructs a client for the mail.v1.MailService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMailServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MailServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mailServiceMethods := v1.File_mail_server_v1_mail_server_service_proto.Services().ByName("MailService").Methods()
	return &mailServiceClient{
		sendMailNoReply: connect.NewClient[v1.SendMailNoReplyRequest, v1.SendMailNoReplyResponse](
			httpClient,
			baseURL+MailServiceSendMailNoReplyProcedure,
			connect.WithSchema(mailServiceMethods.ByName("SendMailNoReply")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mailServiceClient implements MailServiceClient.
type mailServiceClient struct {
	sendMailNoReply *connect.Client[v1.SendMailNoReplyRequest, v1.SendMailNoReplyResponse]
}

// SendMailNoReply calls mail.v1.MailService.SendMailNoReply.
func (c *mailServiceClient) SendMailNoReply(ctx context.Context, req *connect.Request[v1.SendMailNoReplyRequest]) (*connect.Response[v1.SendMailNoReplyResponse], error) {
	return c.sendMailNoReply.CallUnary(ctx, req)
}

// MailServiceHandler is an implementation of the mail.v1.MailService service.
type MailServiceHandler interface {
	SendMailNoReply(context.Context, *connect.Request[v1.SendMailNoReplyRequest]) (*connect.Response[v1.SendMailNoReplyResponse], error)
}

// NewMailServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMailServiceHandler(svc MailServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mailServiceMethods := v1.File_mail_server_v1_mail_server_service_proto.Services().ByName("MailService").Methods()
	mailServiceSendMailNoReplyHandler := connect.NewUnaryHandler(
		MailServiceSendMailNoReplyProcedure,
		svc.SendMailNoReply,
		connect.WithSchema(mailServiceMethods.ByName("SendMailNoReply")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mail.v1.MailService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MailServiceSendMailNoReplyProcedure:
			mailServiceSendMailNoReplyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMailServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMailServiceHandler struct{}

func (UnimplementedMailServiceHandler) SendMailNoReply(context.Context, *connect.Request[v1.SendMailNoReplyRequest]) (*connect.Response[v1.SendMailNoReplyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mail.v1.MailService.SendMailNoReply is not implemented"))
}
