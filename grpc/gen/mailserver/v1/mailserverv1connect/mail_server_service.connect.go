// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mailserver/v1/mail_server_service.proto

package mailserverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/atomic-blend/backend/grpc/gen/mailserver/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MailServerServiceName is the fully-qualified name of the MailServerService service.
	MailServerServiceName = "mailserver.v1.MailServerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MailServerServiceSendMailInternalProcedure is the fully-qualified name of the MailServerService's
	// SendMailInternal RPC.
	MailServerServiceSendMailInternalProcedure = "/mailserver.v1.MailServerService/SendMailInternal"
)

// MailServerServiceClient is a client for the mailserver.v1.MailServerService service.
type MailServerServiceClient interface {
	SendMailInternal(context.Context, *connect.Request[v1.SendMailInternalRequest]) (*connect.Response[v1.SendMailInternalResponse], error)
}

// NewMailServerServiceClient constructs a client for the mailserver.v1.MailServerService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMailServerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MailServerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mailServerServiceMethods := v1.File_mailserver_v1_mail_server_service_proto.Services().ByName("MailServerService").Methods()
	return &mailServerServiceClient{
		sendMailInternal: connect.NewClient[v1.SendMailInternalRequest, v1.SendMailInternalResponse](
			httpClient,
			baseURL+MailServerServiceSendMailInternalProcedure,
			connect.WithSchema(mailServerServiceMethods.ByName("SendMailInternal")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mailServerServiceClient implements MailServerServiceClient.
type mailServerServiceClient struct {
	sendMailInternal *connect.Client[v1.SendMailInternalRequest, v1.SendMailInternalResponse]
}

// SendMailInternal calls mailserver.v1.MailServerService.SendMailInternal.
func (c *mailServerServiceClient) SendMailInternal(ctx context.Context, req *connect.Request[v1.SendMailInternalRequest]) (*connect.Response[v1.SendMailInternalResponse], error) {
	return c.sendMailInternal.CallUnary(ctx, req)
}

// MailServerServiceHandler is an implementation of the mailserver.v1.MailServerService service.
type MailServerServiceHandler interface {
	SendMailInternal(context.Context, *connect.Request[v1.SendMailInternalRequest]) (*connect.Response[v1.SendMailInternalResponse], error)
}

// NewMailServerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMailServerServiceHandler(svc MailServerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mailServerServiceMethods := v1.File_mailserver_v1_mail_server_service_proto.Services().ByName("MailServerService").Methods()
	mailServerServiceSendMailInternalHandler := connect.NewUnaryHandler(
		MailServerServiceSendMailInternalProcedure,
		svc.SendMailInternal,
		connect.WithSchema(mailServerServiceMethods.ByName("SendMailInternal")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mailserver.v1.MailServerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MailServerServiceSendMailInternalProcedure:
			mailServerServiceSendMailInternalHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMailServerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMailServerServiceHandler struct{}

func (UnimplementedMailServerServiceHandler) SendMailInternal(context.Context, *connect.Request[v1.SendMailInternalRequest]) (*connect.Response[v1.SendMailInternalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mailserver.v1.MailServerService.SendMailInternal is not implemented"))
}
