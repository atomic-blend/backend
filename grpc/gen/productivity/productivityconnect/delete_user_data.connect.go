// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: productivity/delete_user_data.proto

package productivityconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	productivity "github.com/atomic-blend/backend/grpc/gen/productivity"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProductivityServiceName is the fully-qualified name of the ProductivityService service.
	ProductivityServiceName = "productivity.ProductivityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProductivityServiceDeleteUserDataProcedure is the fully-qualified name of the
	// ProductivityService's DeleteUserData RPC.
	ProductivityServiceDeleteUserDataProcedure = "/productivity.ProductivityService/DeleteUserData"
)

// ProductivityServiceClient is a client for the productivity.ProductivityService service.
type ProductivityServiceClient interface {
	DeleteUserData(context.Context, *connect.Request[productivity.DeleteUserDataRequest]) (*connect.Response[productivity.DeleteUserDataResponse], error)
}

// NewProductivityServiceClient constructs a client for the productivity.ProductivityService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductivityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProductivityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	productivityServiceMethods := productivity.File_productivity_delete_user_data_proto.Services().ByName("ProductivityService").Methods()
	return &productivityServiceClient{
		deleteUserData: connect.NewClient[productivity.DeleteUserDataRequest, productivity.DeleteUserDataResponse](
			httpClient,
			baseURL+ProductivityServiceDeleteUserDataProcedure,
			connect.WithSchema(productivityServiceMethods.ByName("DeleteUserData")),
			connect.WithClientOptions(opts...),
		),
	}
}

// productivityServiceClient implements ProductivityServiceClient.
type productivityServiceClient struct {
	deleteUserData *connect.Client[productivity.DeleteUserDataRequest, productivity.DeleteUserDataResponse]
}

// DeleteUserData calls productivity.ProductivityService.DeleteUserData.
func (c *productivityServiceClient) DeleteUserData(ctx context.Context, req *connect.Request[productivity.DeleteUserDataRequest]) (*connect.Response[productivity.DeleteUserDataResponse], error) {
	return c.deleteUserData.CallUnary(ctx, req)
}

// ProductivityServiceHandler is an implementation of the productivity.ProductivityService service.
type ProductivityServiceHandler interface {
	DeleteUserData(context.Context, *connect.Request[productivity.DeleteUserDataRequest]) (*connect.Response[productivity.DeleteUserDataResponse], error)
}

// NewProductivityServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductivityServiceHandler(svc ProductivityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	productivityServiceMethods := productivity.File_productivity_delete_user_data_proto.Services().ByName("ProductivityService").Methods()
	productivityServiceDeleteUserDataHandler := connect.NewUnaryHandler(
		ProductivityServiceDeleteUserDataProcedure,
		svc.DeleteUserData,
		connect.WithSchema(productivityServiceMethods.ByName("DeleteUserData")),
		connect.WithHandlerOptions(opts...),
	)
	return "/productivity.ProductivityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProductivityServiceDeleteUserDataProcedure:
			productivityServiceDeleteUserDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProductivityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductivityServiceHandler struct{}

func (UnimplementedProductivityServiceHandler) DeleteUserData(context.Context, *connect.Request[productivity.DeleteUserDataRequest]) (*connect.Response[productivity.DeleteUserDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("productivity.ProductivityService.DeleteUserData is not implemented"))
}
